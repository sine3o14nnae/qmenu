#!/bin/sh

dmenu() {

command dmenu -f -nb "$theme_0" -nf "$theme_1" -sb "$qube_label" -sf "$theme_0" "$@"
}

fmenu_dom0() (

chosefrom=0

while [ -n "$chosefrom" ]; do

	chosefrom=$(printf "New qube\nGlobal preferences\nLogs\nProperty Manager" |\
		dmenu -l 4 -i -p "dom0:" | cut -f1 -d\ )

	case $chosefrom in

		New)

			. $qfd/fqvm_create;;

		Global)

			. $qfd/fqubes_prefs;;

		Logs)

			. $qfd/fq_logs;;

		Property)

			. $qfd/fq_pm;;

		*)
	esac
done
)

fmenu_domu() (

# Change label colors according to user input.
qube_label=$(echo "$@" | tr ' ' '\n' |\
	grep "\--$(qvm-prefs "$qube" label)" | cut -d= -f2)

if [ -z "$qube_label" ]; then qube_label=$theme_1; fi

chosefrom=0

while [ -n "$chosefrom" ]; do

	chosefrom=$(printf "Applications\nAudio input devices\nBlock devices\nBoot\nBootfrom\nClone\nCommand\nDisk\nFirewall\nKeyboard\nKill\nLogs\nPause\nPCI devices\nPreferences\nReboot\nRemove\nServices\nShutdown\nTags\nUnpause\nUSB devices" |\
		dmenu -l 22 -i -p "$qube:" | cut -f1 -d\ )

	case $chosefrom in

		Applications)

			. $qfd/fqvm_appmenus;;

		Audio)

			. $qfd/fqvm_device;;

		Block)

			. $qfd/fqvm_device;;

		Boot)

			qvm-start --skip-if-running "$qube"&;;

		Bootfrom)

			qubes-vm-boot-from-device "$qube";;

		Clone)

			. $qfd/fqvm_clone;;

		Command)

			. $qfd/fqvm_run;;

		Disk)

			. $qfd/fqvm_volume;;

		Firewall)

			. $qfd/fqvm_firewall;;

		Keyboard)

			. $qfd/fq_keyboard;;

		Kill)

			answer=$(printf "No\nYes" | dmenu -i -p "Kill $qube?")

			if [ "$answer" = "Yes" ]; then qvm-kill "$qube"& fi;;

		Logs)

			. $qfd/fq_logs;;

		Pause)

			answer=$(printf "No\nYes" | dmenu -i -p "Pause $qube?")

			if [ "$answer" = "Yes" ]; then qvm-pause "$qube"& fi;;

		PCI)

			. $qfd/fqvm_pci;;

		Preferences)

			. $qfd/fqvm_prefs;;

		Reboot)

			answer=$(printf "No\nYes" | dmenu -i -p "Reboot $qube?")

			if [ "$answer" = "Yes" ]; then

				if qvm-check -q --running "$qube"; then

					$(qvm-shutdown --wait "$qube" && qvm-start "$qube")&
				fi
			fi;;

		Remove)

			. $qfd/fqvm_remove;;

		Services)

			. $qfd/fqvm_service;;

		Shutdown)

			answer=$(printf "No\nYes" | dmenu -i -p "Shutdown $qube?")

			if [ "$answer" = "Yes" ]; then qvm-shutdown "$qube"& fi;;

		Tags)

			. $qfd/fqvm_tags;;

		Unpause)

			qvm-unpause "$qube"&;;

		USB)

			. $qfd/fqvm_device;;

		*)
	esac
done
)

get_list() {

case $1 in

	mgmt_disptemp) flags='|a.....D.$';;

	netvm) flags='|...N....$';;

	template) flags='|t.......$'
esac

list=$(qvm-ls --raw-data -O NAME,FLAGS | grep "$flags" | cut -d '|' -f1)
}


if [ "$2" = "--light-theme" ]; then

	theme_0='#ffffff'
	theme_1='#000000'
else

	theme_0='#000000'
	theme_1='#ffffff'
fi

qube_label=$theme_1

qfd='/lib/qmenu_vm'

case $1 in

	--focused)

		qube=$(xprop -id "$(xdotool getwindowfocus)" _QUBES_VMNAME | cut -d\" -f2)

		if [ "$qube" = "_QUBES_VMNAME:  not found." ]; then

			qube=dom0

			fmenu_dom0
		else

			fmenu_domu "$@"
		fi

		exit 1;;

	--qube=*)

		qube=$(echo "$1" | cut -d= -f2)

		if [ "$qube" = "dom0" ]; then

			fmenu_dom0
		else

			fmenu_domu "$@"
		fi

		exit 1;;

	--all|--halted|--paused|--running|--tags=*);;

	*)

		printf "Usage: $0 [OPTION] (--light-theme) (--{LABEL}=#{HEX TRIPLET})...\nList, manage and configure your qubes via dmenu.\n\n --all\n --focused\n --halted\n --paused\n --running\n --qube=[QUBE]\n --tags=[TAG]\n\n"

		if [ "$1" = "--help" ]; then exit 0; fi; exit 2
esac

while :; do

	# Load 'qvm-ls' into a variable so that it doesnt
	# need to reload again after every user operation.
	qube_list=$(qvm-ls --no-spinner "$1" -O name,state,label,memory,maxmem,class,template,netvm,default_dispvm,ip,priv-max,priv-curr,priv-used,root-max,root-curr,root-used,kernel |\
		sed 's/ LABEL/ 0\@ /g; s/ red/ 1\@ /g; s/ orange/ 2\@ /g; s/ yellow/ 3\@ /g; s/ green/ 4\@ /g; s/ gray/ 5\@ /g; s/ blue/ 6\@ /g; s/ purple/ 7\@ /g; s/ black/ 8\@ /g' |\
		sort -k3,3 |\
		sed 's/ 0\@ / LABEL/g; s/ 1\@ / red/g; s/ 2\@ / orange/g; s/ 3\@ / yellow/g; s/ 4\@ / green/g; s/ 5\@ / gray/g; s/ 6\@ / blue/g; s/ 7\@ / purple/g; s/ 8\@ / black/g')

	# Get out of the while loop and refresh 'qvm-ls' by loading it again
	# into $qube_list, whenever the user selects the 'qvm-ls' top row.
	while [ "$qubes" != "NAME" ]; do

		qubes=$(echo "$qube_list" | dmenu -l 50 | cut -f1 -d\ )

		if [ -z "$qubes" ]; then exit 1; fi

		for qube in $qubes; do

			if [ "$qube" = "dom0" ]; then

				fmenu_dom0

			elif [ "$qube" != "NAME" ]; then

				fmenu_domu "$@"
			fi
		done
	done

	unset qubes
done
